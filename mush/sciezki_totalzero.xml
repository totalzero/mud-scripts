<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on �roda, sierpie� 12, 2020, 4:39  -->
<!-- MuClient version 4.84 -->

<!-- Plugin "sciezki_totalzero" generated by Plugin Wizard -->

<muclient>
<plugin
   name="sciezki_totalzero"
   author="totalzero"
   id="ddd2a0e1c6c33ce7a3b3288a"
   language="Lua"
   purpose="sciezki 2.6"
   save_state="y"
   date_written="2020-08-12 16:38:33"
   requires="4.84"
   version="1.0"
   >
<description trim="y">
<![CDATA[
manager sciezek od totalzero z dedykacja dla rogana.
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="sciezki_kroktyl"
   match="*Jestes tak zmeczony, ze nie mozesz dalej podazac w tym kierunku"
   send_to="12"
   sequence="100"
  >
  <send>cofka_kroktyl()</send>
  </trigger>
  <trigger
   group="sciezki_krokprzod"
   match="*Jestes tak zmeczony, ze nie mozesz dalej podazac w tym kierunku*"
   send_to="12"
   sequence="100"
  >
  <send>cofka_krokprzod()</send>
  </trigger>
  <trigger
   group="sciezki_mapper"
   match="*Nie widzisz zadnego wyjscia prowadzacego na *"
   send_to="12"
   sequence="100"
  >
  <send>usun_krok()</send>
  </trigger>
  <trigger
   group="sciezki_mapper"
   match="Ruszasz razno na *, schodzac z wytyczonego traktu, jednak okazuje*"
   send_to="12"
   sequence="100"
  >
  <send>usun_krok()</send>
  </trigger>
  <trigger
   group="idz_dalej"
   match="*Nikt z twojej druzyny nie jest zaangazowany w walke."
   send_to="12"
   sequence="100"
  >
  <send>krok_przod()</send>
  </trigger>
  <trigger
   group="regen"
   match="tutaj wpisz poziom many od ktorej ma byc regen"
   send_to="12"
   sequence="100"
  >
  <send>uruchomRegen()</send>
  </trigger>

  <trigger
   group="idz_dalej"
   match="*Doliczyles sie * sztuk.*"
   sequence="100"
  >
  <send>zabij mmarynarza
pprzejdz za dwana</send>
  </trigger>

  <trigger
   group="idz_dalej"
   match="*Nie widzisz tu*"
   send_to="12"
   sequence="100"
  >
  <send>krok_przod()</send>
  </trigger>

  <trigger
   group="idz_dalej"
   match="*Za toba przybywaja*"
   sequence="100"
  >
  <send>policz marynarzy</send>
  </trigger>


  <trigger
   enabled="y"
   group="sciezki_kroktyl"
   match="*koniec sciezki*"
   send_to="12"
   sequence="100"
  >
  <send>powiedz koniec</send>
  </trigger>
  
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="idl"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>pokaz_sciezki()</send>
  </alias>
  <alias
   match="koleczko on"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>koleczko_on()</send>
  </alias>
  <alias
   match="koleczko off"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>koleczko_off()</send>
  </alias>
  
<alias
   match="regen on"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>regenon()</send>
  </alias>
  
<alias
   match="regen off"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>regenoff()</send>
  </alias>
  
  <alias
   match="idp"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>info()</send>
  </alias>
  <alias
   match="idq"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>ustaw_poczatek()</send>
  </alias>
  <alias
   match="ids *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>wybierz(%1)</send>
  </alias>
  <alias
   match="idw"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>ustaw_koniec()</send>
  </alias>
  <alias
   match="ind"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>usun_krok()</send>
  </alias>
  <alias
   match="inh"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>pomoc()</send>
  </alias>
  <alias
   match="lazik_przod"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>DPlazik_on()</send>
  </alias>
  <alias
   script="dodaj_krok"
   match="ink *"
   enabled="y"
   sequence="100"
  >
  </alias>
  <alias
   match="lazik_tyl"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>DTlazik_on()</send>
  </alias>
  <alias
   match="lazik_off"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>lazik_off()</send>
  </alias>
  <alias
   match="inr"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>usun_sciezke()</send>
  </alias>
  <alias
   match="lazik_czas *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>ustaw_lazikczas(%1)</send>
  </alias>
  <alias
   script="dodaj_sciezke"
   match="ins *"
   enabled="y"
   sequence="100"
  >
  </alias>
  <alias
   match="inw *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>wybierz_krok(%1)</send>
  </alias>
  <alias
   script="DodajKrokE"
   match="e"
   group="sciezki_mapper"
   sequence="100"
  >
  </alias>
  <alias
   match="mapperoff"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>mapperoff()</send>
  </alias>
  <alias
   match="mapperon"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>mapperon()</send>
  </alias>
  <alias
   script="DodajKrokN"
   match="n"
   group="sciezki_mapper"
   sequence="100"
  >
  </alias>
  <alias
   script="DodajKrokNE"
   match="ne"
   group="sciezki_mapper"
   sequence="100"
  >
  </alias>
  <alias
   script="DodajKrokNW"
   match="nw"
   group="sciezki_mapper"
   sequence="100"
  >
  </alias>
  <alias
   script="DodajKrokS"
   match="s"
   group="sciezki_mapper"
   sequence="100"
  >
  </alias>
  <alias
   script="DodajKrokSE"
   match="se"
   group="sciezki_mapper"
   sequence="100"
  >
  </alias>
  <alias
   script="DodajKrokSW"
   match="sw"
   group="sciezki_mapper"
   sequence="100"
  >
  </alias>
  <alias
   script="DodajKrokW"
   match="w"
   group="sciezki_mapper"
   sequence="100"
  >
  </alias>
  <alias
   match="idz_dalej_on"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>idz_dalej_on()</send>
  </alias>
  <alias
   match="idz_dalej_off"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>idz_dalej_off()</send>
  </alias>

</aliases>

<!--  Script  -->


<script>
<![CDATA[
lazik = false
lazik_czas = 1
kierunki = {
["0"] = "u",
["1"] = "n",
["2"] = "ne",
["3"] = "e",
["4"] = "se",
["5"] = "s",
["6"] = "sw",
["7"] = "w",
["8"] = "nw",
["9"] = "d",
["z"] = "wespnij sie na gore",
["x"] = "zejdz na dol",
["c"] = "przecisnij sie przez otwor",
["v"] = "przecisnij sie przez szczeline",
["b"] = "otwor",
["m"] = "przepraw sie przez rzeke",
["a"] = "przeplyn rzeke",
["f"] = "wyjscie",
["g"] = "wyrwa",
["h"] = "wejdz po schodkach",
["j"] = "zejdz po schodkach",
["l"] = "most"
}

kierunki_num = {
["u"] = "0",
["n"] = "1",
["ne"] = "2",
["e"] = "3",
["se"] = "4",
["s"] = "5",
["sw"] = "6",
["w"] = "7",
["nw"] = "8",
["d"] = "9",
["wespnij sie na gore"] = "z",
["zejdz na dol"] = "x",
["przecisnij sie przez otwor"] = "c",
["przecisnij sie przez szczeline"] = "v",
["otwor"] = "b",
["przepraw sie przez rzeke"] = "m",
["przeplyn rzeke"] = "a",
["wyjscie"] = "f",
["wyrwa"] = "g",
["wejdz po schodkach"] = "h",
["zejdz po schodkach"] = "j",
["most"] = "l"
}

kierunki_odwrot = {
["u"] = "d",
["d"] = "u",
["n"] = "s",
["s"] = "n",
["w"] = "e",
["e"] = "w",
["ne"] = "sw",
["sw"] = "ne",
["se"] = "nw",
["nw"] = "se",
["wespnij sie na gore"] = "zejdz na dol",
["zejdz na dol"] = "wespnij sie na gore",
["przecisnij sie przez otwor"] = "przecisnij sie przez otwor",
["przecisnij sie przez szczeline"] = "przecisnij sie przez szczeline",
["otwor"] = "otwor",
["przepraw sie przez rzeke"] = "przepraw sie przez rzeke",
["przeplyn rzeke"] = "przeplyn rzeke",
["wyrwa"] = "wyrwa",
["wejdz po schodkach"] = "zejdz po schodkach",
["zejdz po schodkach"] = "wejdz po schodkach",
["most"] = "most"
}

sciezki = {}
wybrana_sciezka = 1
nazwa_sciezki = ""
local kroki = ""
licznik_krokow = 1
koleczko = false
regen = false

function regenon()
regen = true
EnableTriggerGroup("regen", true)
Note("uruchamiam czujnik regenu many")
end

function regenoff()
regen = false
EnableTriggerGroup("regen", false)
Note("wylaczam czujnik regenu many")
end

function koleczko_on()
koleczko = true
Note("odpalam koleczko")
end

function koleczko_off() 
koleczko = false
Note("wylaczam koleczko")
end

function uruchomRegen()
if regen == true then
EnableTriggerGroup("idz_dalej", false)
krok_tyl()
krok_tyl()
AddTimer("regen-timer", 0, 5, 0, "jezyk", timer_flag.Enabled + timer_flag.OneShot, "koniec_regen")
AddTimer("regen-czar", 0, 0, 11, "mwypowiedz odnowienie mocy z ksiegi wskazujac siebie", timer_flag.Enabled + timer_flag.OneShot, "")
Note("odwalam regeneracje many")
end
end

function koniec_regen()
EnableTriggerGroup("idz_dalej", true)
krok_przod()
krok_przod()
Send("policz marynarzy")
end

function dodaj_krok(name, line, wildcards)
local kk = kierunki_num[wildcards[1]]
if kk == nil then
Note("bledny kierunek, pomylka w translacji")
else
kroki = kroki..kk
Note("dodano krok: ", kierunki[kk])
SetVariable(nazwa_sciezki, kroki)
end
end

function wybierz(n)
wczytaj()
wybrana_sciezka = tonumber(n)
if sciezki[wybrana_sciezka] == nil then
Note("nie ma takiej sciezki")
else
kroki = GetVariable(sciezki[wybrana_sciezka])
nazwa_sciezki = sciezki[wybrana_sciezka]
Note("zaladowano sciezke numer", n)
Note("o nazwie", sciezki[n])
AcceleratorTo("f5", "krok_przod()", 12)
AcceleratorTo("f6", "krok_tyl()", 12)
Note("ustawiono klawisze f5 i f6 do kroczenia po sciezce")
licznik_krokow = 1
end
end

function dodaj_sciezke(name, line, wildcards)
kroki = ""
if SetVariable(wildcards[1], kroki) == 0 then
Note("dodano sciezke: ", wildcards[1])
nazwa_sciezki = wildcards[1]
licznik_krokow = 1
else
Note("nie prawidlowa nazwa sciezki")
end
end

function zapisz()
--SaveState()
--Save("")
--Note("sciezki zostaly zapisane")
end

function wczytaj()
sciezki = {}
local sciezki_tym = GetVariableList()
l = 1
for i,v in pairs(sciezki_tym) do
sciezki[l] = i
l = l + 1
end
l = 1
end

function krok_przod()
if licznik_krokow <= string.len(kroki) then
if licznik_krokow == 0 then
licznik_krokow = 1
end
local kroczek = kroki:sub(licznik_krokow, licznik_krokow)
local informacja = "krok "..tostring(licznik_krokow).." z "..tostring(string.len(kroki))
Note(informacja)
Send(kierunki[kroczek])
licznik_krokow = licznik_krokow + 1
EnableTriggerGroup("sciezki_krokprzod", true)
EnableTriggerGroup("sciezki_kroktyl", false)
EnableGroup("sciezki_mapper", false)
else
if koleczko == true then
ustaw_poczatek()
krok_przod()
Note("koleczko jest odpalone, nowa sekwencja")
else 
Note("koniec sciezki")
end
end
end

function krok_tyl()
if licznik_krokow > 0 then
if licznik_krokow > string.len(kroki) then
licznik_krokow = string.len(kroki)
end
local informacja = "krok "..tostring(licznik_krokow).." z "..tostring(string.len(kroki))
Note(informacja)
Send(kierunki_odwrot[kierunki[kroki:sub(licznik_krokow, licznik_krokow)]])
EnableTriggerGroup("sciezki_krokprzod", false)
EnableTriggerGroup("sciezki_kroktyl", true)
EnableGroup("sciezki_mapper", false)
licznik_krokow = licznik_krokow - 1
else
Note("poczatek sciezki")
licznik_krokow = 0
end
end


function pokaz_sciezki()
wczytaj()
for i, v in pairs(sciezki) do
Note(i, v)
end
end

function usun_sciezke()
DeleteVariable(nazwa_sciezki)
kroki = ""
nazwa_sciezki = ""
Note("sciezka zostala usunieta")
wybierz(1)
end

function usun_krok()
local ilosc_krokow = string.len(kroki)
if ilosc_krokow <= 1 then
kroki = ""
else
ilosc_krokow = ilosc_krokow - 1
kroki = kroki:sub(1, ilosc_krokow)
end
Note("usunieto ostatni krok")
SetVariable(nazwa_sciezki, kroki)
end

function ustaw_poczatek()
licznik_krokow = 1
Note("ustawiono focus krokow na poczatek")
end

function ustaw_koniec()
licznik_krokow = string.len(kroki)
Note("ustawiono na koniec")
end

function info()
kroki = GetVariable(nazwa_sciezki)
if kroki == nil then
Note("nie ustawiono zadnej sciezki")
else
Note("obecnie ustawiona sciezka to: ")
Note(nazwa_sciezki)
Note("liczba krokow w tej sciezce: ", string.len(kroki))
Note("lista krokow: ")
local liczniczek = 0
for i in string.gmatch(kroki, ".") do
Note(liczniczek, " ", kierunki[i])
liczniczek = liczniczek + 1
end
end
end

function cofka_krokprzod()
licznik_krokow = licznik_krokow - 1
end

function cofka_kroktyl()
licznik_krokow = licznik_krokow + 1
end

function wybierz_krok(n)
licznik_krokow = tonumber(n)
if licznik_krokow == 0 then
licznik_krokow = 1
end
if licznik_krokow > string.len(kroki) then
licznik_krokow = string.len(kroki)
end
Note("wybrano krok", n)
end

function pomoc()
Note("pomoc do skryptu sciezek")
Note("autor: Totalzero")
Note(" ins  = dodaj nowa sciezke, uwaga - tytul sciezki nie moze zawierac spacji")
Note("ink = dodaj kolejny krok, uwaga! Kroki zawsze dodawane na koncu")
Note("idl = lista wszystkich sciezek")
Note("idp = Informacja o sciezce, liczba krokow i lista krokow")
Note("idq = ustawienie focus krokow na poczatek")
Note("idw = ustawienie focus krokow na koniec")
Note("ids = wybor sciezki, nalezy wpisac cyfre ktora jest przyporzadkowana do danej sciezki na liscie sciezek")
Note("ind = usuniecie ostatniego kroku na liscie krokow")
Note("inr = usuniecie wybranej sciezki")
Note("inw = wybranie kroku, uwaga - kroki nalezy liczyc od pozycji 2, pierwszy krok zawsze bedzie = nil")
Note("inh = pomoc do skryptu sciezek")
Note("***--- M A P P E R---***")
Note("mapperon - uruchamia mapper, od teraz wszystkie kierunki zostana automatycznie dodane do krokow")
Note("mapperoff - wylacza mappera, to chyba nie wymaga komentarza...")
Note("uwaga")
Note("jezeli bedziesz chcial kroczyc sciezka, obojetnie w jakim kierunku, mapper zostanie automatycznie wylaczony")
Note("***---   L A Z I K    ***---")
Note("lazik_przod - uruchamia lazik do przodu")
Note("lazik_tyl - uruchamia lazik do tylu")
Note("lazik_off - wylacza lazika, uwaga - lazik sam sie wylacza po przejsciu sciezki, off sluzy tylko kiedy chcesz przerwac automatyczne chodzenie w trakcie kroczenia po sciezce")
Note("lazik_czas * - ustawia predkosc lazika w sekundach, domyslnie ustawione na 1")
end

function DodajKrokS(name, line, wildcards)
local k = kroki:sub(string.len(kroki), string.len(kroki))
local z = kierunki_odwrot[kierunki[k]]
if z == "s" then
usun_krok()
else
dodaj_krok("mapper", 1, {"s"})
end
end

function DodajKrokW(name, line, wildcards)
local k = kroki:sub(string.len(kroki), string.len(kroki))
local z = kierunki_odwrot[kierunki[k]]
if z == "w" then
usun_krok()
else
dodaj_krok("mapper", 1, {"w"})
end
end

function DodajKrokE(name, line, wildcards)
local k = kroki:sub(string.len(kroki), string.len(kroki))
local z = kierunki_odwrot[kierunki[k]]
if z == "e" then
usun_krok()
else
dodaj_krok("mapper", 1, {"e"})
end
end

function DodajKrokN(name, line, wildcards)
local k = kroki:sub(string.len(kroki), string.len(kroki))
local z = kierunki_odwrot[kierunki[k]]
if z == "n" then
usun_krok()
else
dodaj_krok("mapper", 1, {"n"})
end
end

function DodajKrokNW(name, line, wildcards)
local k = kroki:sub(string.len(kroki), string.len(kroki))
local z = kierunki_odwrot[kierunki[k]]
if z == "nw" then
usun_krok()
else
dodaj_krok("mapper", 1, {"nw"})
end
end

function DodajKrokSE(name, line, wildcards)
local k = kroki:sub(string.len(kroki), string.len(kroki))
local z = kierunki_odwrot[kierunki[k]]
if z == "se" then
usun_krok()
else
dodaj_krok("mapper", 1, {"se"})
end
end

function DodajKrokNE(name, line, wildcards)
local k = kroki:sub(string.len(kroki), string.len(kroki))
local z = kierunki_odwrot[kierunki[k]]
if z == "ne" then
usun_krok()
else
dodaj_krok("mapper", 1, {"ne"})
end
end

function DodajKrokSW(name, line, wildcards)
local k = kroki:sub(string.len(kroki), string.len(kroki))
local z = kierunki_odwrot[kierunki[k]]
if z == "sw" then
usun_krok()
else
dodaj_krok("mapper", 1, {"sw"})
end
end

function mapperon()
EnableGroup("sciezki_mapper", true)
Note("mapper wlaczony, teraz twoje kroki beda automatycznie zapisywane")
end

function mapperoff()
EnableGroup("sciezki_mapper", false)
Note("mapper wylaczony")
end

function DPlazik_on()
lazik = true
AddTimer("lazik_p", 0, 0, lazik_czas, "", timer_flag.Enabled + timer_flag.OneShot, "lazik_przod")
Note("odpalam lazika")
end

function DTlazik_on()
lazik = true
AddTimer("lazik_t", 0, 0, lazik_czas, "", timer_flag.Enabled + timer_flag.OneShot, "lazik_tyl")
Note("odpalam lazika")
end

function lazik_off()
lazik = false
ResetTimers()
Note("usuwam lazika")
end

function lazik_przod(name, line, wildcards)
if lazik == true then
if licznik_krokow <= string.len(kroki) then
AddTimer("", 0, 0, lazik_czas, "", timer_flag.Enabled + timer_flag.OneShot, "lazik_przod")
krok_przod()
else
lazik = false
ResetTimers()
Note("koniec drogi, zatrzymuje lazika")
end
else
Note("zatrzymuje lazik")
end
end

function lazik_tyl(name, line, wildcards)
if lazik == true then
if licznik_krokow > 0 then
krok_tyl()
AddTimer("", 0, 0, lazik_czas, "", timer_flag.Enabled + timer_flag.OneShot, "lazik_tyl")
else
lazik = false
ResetTimers()
Note("koniec drogi, zatrzymuje lazika")
end
else
Note("zatrzymuje lazik")
end
end

function ustaw_lazikczas(n)
lazik_czas = tonumber(n)
Note("ustawiono kroczenie co: ", n, "sekund")
end
]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="sciezki_totalzero:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
function idz_dalej_on() 
EnableGroup("idz_dalej", true)
end

function idz_dalej_off() 
EnableGroup("idz_dalej", false)
end

]]>
</script> 

</muclient>
